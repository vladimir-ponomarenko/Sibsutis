import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import random
import hashlib
import json
from typing import List, Dict, Tuple
import threading
import time
from tkinter import font


class MentalPoker:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üÉè –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–∫–µ—Ä - –¢–µ—Ö–∞—Å—Å–∫–∏–π —Ö–æ–ª–¥–µ–º")
        self.root.geometry("1000x700")
        self.root.configure(bg='#2c3e50')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
        self.num_players = 2
        self.num_cards = 52
        self.cards_per_player = 2
        self.community_cards = 5
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.players = []
        self.deck = []
        self.encrypted_deck = []
        self.player_cards = {}
        self.community_cards_revealed = []
        self.game_phase = "setup"  # setup, dealing, playing, finished
        
        # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.p = 0
        self.g = 0
        self.player_keys = {}
        
        self.setup_ui()
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
        style.configure('Title.TLabel', 
                       background='#2c3e50', 
                       foreground='#ecf0f1', 
                       font=('Arial', 16, 'bold'))
        
        style.configure('Header.TLabel', 
                       background='#34495e', 
                       foreground='#ecf0f1', 
                       font=('Arial', 12, 'bold'))
        
        style.configure('Card.TLabel', 
                       background='#ecf0f1', 
                       foreground='#2c3e50', 
                       font=('Courier', 10, 'bold'),
                       padding=5)
        
        style.configure('Action.TButton', 
                       background='#3498db', 
                       foreground='white',
                       font=('Arial', 10, 'bold'),
                       padding=10)
        
        style.map('Action.TButton',
                 background=[('active', '#2980b9')])
        
        style.configure('Success.TButton', 
                       background='#27ae60', 
                       foreground='white',
                       font=('Arial', 10, 'bold'),
                       padding=10)
        
        style.map('Success.TButton',
                 background=[('active', '#229954')])
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        game_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ò–≥—Ä–∞", menu=game_menu)
        game_menu.add_command(label="–ù–æ–≤–∞—è –∏–≥—Ä–∞", command=self.new_game)
        game_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üÉè –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–∫–µ—Ä - –¢–µ—Ö–∞—Å—Å–∫–∏–π —Ö–æ–ª–¥–µ–º", style='Title.TLabel')
        title_label.pack(pady=(0, 20))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        settings_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã", style='Header.TLabel')
        settings_frame.pack(fill=tk.X, pady=(0, 15))
        settings_frame.configure(style='Header.TLabel')
        
        settings_inner = ttk.Frame(settings_frame)
        settings_inner.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(settings_inner, text="üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:", style='Header.TLabel').grid(row=0, column=0, sticky=tk.W, padx=(0, 10), pady=5)
        self.players_var = tk.StringVar(value="2")
        players_combo = ttk.Combobox(settings_inner, textvariable=self.players_var, 
                                   values=["2", "3", "4", "5", "6"], state="readonly", width=5)
        players_combo.grid(row=0, column=1, sticky=tk.W, padx=(0, 20), pady=5)
        
        start_btn = ttk.Button(settings_inner, text="üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", command=self.start_game, style='Action.TButton')
        start_btn.grid(row=0, column=2, padx=5, pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
        info_frame = ttk.LabelFrame(main_frame, text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ", style='Header.TLabel')
        info_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.info_text = scrolledtext.ScrolledText(info_frame, height=6, wrap=tk.WORD, 
                                                 font=('Consolas', 9), bg='#ecf0f1', fg='#2c3e50')
        self.info_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤
        cards_frame = ttk.LabelFrame(main_frame, text="üÉè –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤", style='Header.TLabel')
        cards_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        self.cards_text = scrolledtext.ScrolledText(cards_frame, height=8, wrap=tk.WORD,
                                                  font=('Consolas', 10), bg='#ecf0f1', fg='#2c3e50')
        self.cards_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        deal_btn = ttk.Button(control_frame, text="üé≤ –†–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã", command=self.deal_cards, style='Action.TButton')
        deal_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        show_btn = ttk.Button(control_frame, text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã", command=self.show_community_cards, style='Action.TButton')
        show_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        winner_btn = ttk.Button(control_frame, text="üèÜ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", command=self.determine_winner, style='Success.TButton')
        winner_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.log("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–∫–µ—Ä!")
        self.log("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'")
        
    def log(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = time.strftime('%H:%M:%S')
        self.info_text.insert(tk.END, f"üïê {timestamp} - {message}\n")
        self.info_text.see(tk.END)
        self.root.update()
        
    def new_game(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        self.game_phase = "setup"
        self.players = []
        self.deck = []
        self.encrypted_deck = []
        self.player_cards = {}
        self.community_cards_revealed = []
        self.player_keys = {}
        
        self.info_text.delete(1.0, tk.END)
        self.cards_text.delete(1.0, tk.END)
        
        self.log("–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!")
        self.log("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'")
        
    def start_game(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            self.num_players = int(self.players_var.get())
            if self.num_players < 2 or self.num_players > 6:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 6")
                return
                
            self.log(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É —Å {self.num_players} –∏–≥—Ä–æ–∫–∞–º–∏")
            self.setup_cryptographic_parameters()
            self.generate_deck()
            self.game_phase = "dealing"
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤")
            
    def setup_cryptographic_parameters(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        self.p = 1009
        self.g = 2
        
        self.log(f"–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: p={self.p}, g={self.g}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for i in range(self.num_players):
            key = random.randint(1, self.p - 1)
            self.player_keys[i] = key
            self.log(f"–ò–≥—Ä–æ–∫ {i+1} –ø–æ–ª—É—á–∏–ª –∫–ª—é—á: {key}")
            
    def generate_deck(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç"""
        suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        
        self.deck = []
        for suit in suits:
            for rank in ranks:
                self.deck.append(f"{rank}{suit}")
                
        self.log(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–¥–∞ –∏–∑ {len(self.deck)} –∫–∞—Ä—Ç")
        
    def deal_cards(self):
        """–†–∞–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º"""
        if self.game_phase != "dealing":
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É")
            return
            
        self.log("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–¥–∞—á—É –∫–∞—Ä—Ç...")
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        random.shuffle(self.deck)
        self.log("–ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞")
        
        # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
        for i in range(self.num_players):
            player_cards = []
            for j in range(self.cards_per_player):
                card = self.deck.pop(0)
                player_cards.append(card)
            self.player_cards[i] = player_cards
            self.log(f"–ò–≥—Ä–æ–∫ {i+1} –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—ã: {', '.join(player_cards)}")
            
        # –í—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã
        self.community_cards_revealed = []
        for i in range(self.community_cards):
            card = self.deck.pop(0)
            self.community_cards_revealed.append(card)
            
        self.log(f"–û–±—â–∏–µ –∫–∞—Ä—Ç—ã: {', '.join(self.community_cards_revealed)}")
        
        self.update_cards_display()
        self.game_phase = "playing"
        
    def show_community_cards(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã"""
        if not self.community_cards_revealed:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç—ã")
            return
            
        self.log("–û–±—â–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ:")
        for i, card in enumerate(self.community_cards_revealed):
            self.log(f"  {i+1}. {card}")
            
    def determine_winner(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        if self.game_phase != "playing":
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç—ã")
            return
            
        self.log("–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...")
        
        winner = random.randint(0, self.num_players - 1)
        
        self.log(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ò–≥—Ä–æ–∫ {winner + 1}")
        self.log("–ö–∞—Ä—Ç—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:")
        for card in self.player_cards[winner]:
            self.log(f"  {card}")
            
        self.game_phase = "finished"
        
    def update_cards_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç"""
        self.cards_text.delete(1.0, tk.END)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–æ–≤
        for i in range(self.num_players):
            self.cards_text.insert(tk.END, f"üë§ –ò–≥—Ä–æ–∫ {i+1}:\n", 'player_header')
            for card in self.player_cards[i]:
                card_display = self.format_card(card)
                self.cards_text.insert(tk.END, f"  {card_display}\n")
            self.cards_text.insert(tk.END, "\n")
            
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–∏—Ö –∫–∞—Ä—Ç
        if self.community_cards_revealed:
            self.cards_text.insert(tk.END, "üåê –û–±—â–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ:\n", 'community_header')
            for i, card in enumerate(self.community_cards_revealed):
                card_display = self.format_card(card)
                self.cards_text.insert(tk.END, f"  {i+1}. {card_display}\n")
                
    def format_card(self, card: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É —Å —ç–º–æ–¥–∑–∏"""
        if '‚ô†' in card:
            return card.replace('‚ô†', '‚ô†Ô∏è')
        elif '‚ô•' in card:
            return card.replace('‚ô•', '‚ô•Ô∏è')
        elif '‚ô¶' in card:
            return card.replace('‚ô¶', '‚ô¶Ô∏è')
        elif '‚ô£' in card:
            return card.replace('‚ô£', '‚ô£Ô∏è')
        return card
                
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.mainloop()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = MentalPoker()
    app.run()


if __name__ == "__main__":
    main()
